using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TestController : MonoBehaviour
{
    [SerializeField] Transform cam;

    [SerializeField] float moveSpeed = 10f;
    [SerializeField] float turnSpeed = 10f;
    Quaternion targetRotation;

    float angle;
    Vector2 input;
    
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// called when the script instance is being loaded
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void Awake()
    {
        AddSubscriptions();
    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// called before the first frame update
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void Start()
    {

    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// add GameEvent listeners
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void AddSubscriptions()
    {
        //Events.instance.AddListener<EVENT_KEYBOARD_KEY_BROADCAST>(UpdateInput);
    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// remove GameEvent listeners
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void RemoveSubscriptions()
    {
        //Events.instance.RemoveListener<EVENT_KEYBOARD_KEY_BROADCAST>(UpdateInput);
    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// listen to keyboad key broadcast game event
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void UpdateInput()
    {
        input.x = Input.GetAxisRaw("Horizontal");
        input.y = Input.GetAxisRaw("Vertical");
    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// which way are we going
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void CalculateDirection()
    {
        angle = Mathf.Atan2(input.x, input.y);
        angle = Mathf.Rad2Deg * angle;
        angle += cam.eulerAngles.y;
    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// rotate
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void Rotate()
    {
        targetRotation = Quaternion.Euler(0, angle, 0);
        transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, turnSpeed * Time.deltaTime);
    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// actually move
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void Move()
    {
        transform.position += transform.forward * moveSpeed * Time.deltaTime;
    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// late update
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void Update()
    {
        UpdateInput();
        print(input);
        if(Mathf.Abs(input.x) < 1 && Mathf.Abs(input.y) < 1) return;
        CalculateDirection();
        Rotate();
        Move();
    }
    /*////////////////////////////////////////////////////////////////////////////////////////////////*/
    /// <summary>
    /// called when the MonoBehaviour will be destroyed
    /// </summary>
    /*///////////////////////////////////////////////////////////////////////////////////////////////*/
    void OnDestroy()
    {
        RemoveSubscriptions();
    }
}
